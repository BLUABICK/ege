from re import *

data = 'Роза в саду'
pattern = r'Роза'

res = match(pattern, data) # проверяет, начинает ли data с шаблона pattern
print(res.group()) # выводит содержимое найденной подстроки
print(res.span()) #  выводит индексы найденной подстроки
print(res.start()) # выводит индекс начала найденной подстроки
print(res.end())# выводит индекс конца найденной подстроки

data2 = 'привет Роза в саду'
res2 = search(pattern, data2) # находит первое слева вхождение, возвращает match-объект
print(res2)

data3 = 'BABABABABBABAB'
pattern2 = r'BAB'
matches = finditer(pattern2, data3) #ищет все непересекающиеся совпадения регулярного выражения в строке.
#Она возвращает итератор, содержащий в себе match-объекты каждого найденного совпадения
print([m.group() for m in matches])

matches2 = findall(pattern2, data3)# ищет все непересекающиеся совпадения регулярного выражения в строке.
# В отличие от finditer(), возвращает список строк или кортежей,
# содержащих найденные совпадения.
print(matches2)

matches3 = sub(pattern2, 'BOB', data3)
print(matches3)

# Метасимволы
# . – ровно один любой символ;
# \d – любая цифра;
# \D – любая НЕ цифра;
# \s – любой пробельный символ;
# \S – любой НЕ пробельный символ;
# \w – любая буква, цифра или _;
# \b – граница слова;
# \В – НЕ граница слова;

# [0-9] – цифры от 0 до 9;
# [a-z] – латинский алфавит в нижнем регистре;
# [A-Z] – латинский алфавит в верхнем регистре;
# [0-9a-zA-Z] – все цифры и буквы;
# [а-яё] – кириллица в нижнем регистре;
# ^ - исключающий символ;
# [^0-9] – НЕ цифры от 0 до 9;

# Квантификаторы
# Количество символов можно указывать в виде диапазона «{m, n}»,
# что будет значить от m до n повторений предыдущего символа включительно;
# +.../...{1,} – хотя бы одно вхождение;
# *.../...{0,} – любое кол-во вхождений;
# ? – либо 0, либо 1 раз;

# Скобочные группы
# (NPO|PNO)+ - выражение позволило сгруппировать подстроки для конкретной работы +
# Положительная опережающая проверка - (?=...) - ищет предложения, после которых идёт текст в скобках;
# Отрицательная опережающая проверка - (?!...) - ищет предложения, после которых не идёт текст в скобках;
# Положительная ретроспективная проверка - (?<=...) - ищет предложения, перед которыми идёт текст в скобках;
# Отрицательная ретроспективная проверка - (?<!...) - ищет предложения, перед которыми не идёт текст в скобках;

#isalpha() - возвращает true если все символы непустой строки это буквы
st1 = 'hello'
print(st1.isalpha())

#isdigit() - возвращает true если все символы непустой строки это цифры
st1 = '1245'
print(st1.isdigit())

#isalnum() - возвращает true если все символы непустой строки это буквы или цифры
st1 = '1234d3sds4'
print(st1.isalnum())
#isspace() - возвращает true если все символы непустой строки это пробел
st1 = '     '
print(st1.isspace())
#isupper()/islower() - возвращает true если все символы непустой строки в верхнем/нижнем регистре
st1 = 'LLLLLLL'
st2 = 'lllllll'
print(st1.isupper(), st2.islower())

# string.split(разделитель sep, кол-во разделений maxsplit)
#
# Разделяет строку string на подстроки, используя sep как разделитель
# и возвращает список этих подстрок.
#
# Если параметр sep не указан, то считается, что он равен пробелу. Если указан параметр maxsplit, то делается не более maxsplit разбиений (т.е. список содержит maxsplit+1 строку).
#
# Параметр sep может содержать больше одного символа.
st = 'имя.фамилия.отчество'
print(st.split('.'))

#partition() - Разбивает строку на три подстроки и возвращает кортеж из трёх элементов:
#подстрока до разделителя
#разделитель
#подстрока после разделителя
st = 'имя.фамилия.отчество'
print(st.partition('.'))
#join()
# возвращает строку, собранную из элементов последовательности
#
# string.join(iterable)
#
# применяется к строке string, которая будет вставлена между элементами последовательности iterable

#strip()
#
# возвращает копию строки, с обоих концов которой удалены указанные символы
#
# По умолчанию удаляются пробелы
#
# Методы rstrip() и lstrip() работают аналогично, но удаляют символы только с правого или левого конца, соответственно.


# replace()
#
# string.replace(old, new, count)
#
# Возвращает копию строки string, в которой все элементы old заменены на new
#
# Параметр count указывает, сколько элементов old необходимо заменить